{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red252\green49\blue17;\red0\green0\blue0;
\red0\green0\blue233;}
{\*\expandedcolortbl;;\cssrgb\c100000\c100000\c100000;\cssrgb\c100000\c29020\c6667;\cssrgb\c0\c0\c0;
\cssrgb\c0\c0\c93333;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww16980\viewh15360\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf2 \cb3 \expnd0\expndtw0\kerning0
\uc0\u55357 \u56693 \u65039  Recherche\
\pard\pardeftab720\sa320\partightenfactor0

\f1\b0\fs32 \cf0 \cb2 Findet gemeinsam Antworten auf die folgenden Fragen und tragt sie hier ein.\
Nutzt zur Recherche verschiedene Quellen, wie Google, offizielle Dokumentationen und Fachliteratur.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Recherchiert wie man ein anderes Feld statt "ID" als den Prim\'e4rschl\'fcssel verwenden kann.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8259 	}\expnd0\expndtw0\kerning0
Man muss f\'fcr das zu verwendende Feld einen Index erstellen, der sicherstellt, dass jeder Wert, der in diesem Feld verwendet wird, auch eindeutig ist ///.  Man kann auch im Code die Annotation @MongoId verwenden, damit Spring diesen Index anlegt.\
\ls1\ilvl1\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8259 	}@Id an Eigenschaft -> in DB werden dessen Werte in _id gespeichert\expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Welche grundlegenden Operationen werden durch die Standardmethoden im Spring Data Repository-Interface bereitgestellt? Nenne 5 Operationen und erl\'e4utere, wie sie im Repository verwendet werden k\'f6nnen.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8259 	}\expnd0\expndtw0\kerning0
save(S entity): Save an entity. This can be either a new object (create) or an existing one (update). saveAll(Iterable<S> entities): Save multiple entities. findById(ID id): Retrieve an entity by its ID. existsById(ID id): Check if an entity with the given ID exists. findAll(): Retrieve all entities. findAllById(Iterable<ID> ids): Retrieve all entities with the given IDs. count(): Return the number of entities. deleteById(ID id): Delete an entity by its ID. delete(T entity): Delete a given entity. deleteAll(Iterable<? extends T> entities): Delete multiple entities. deleteAll(): Delete all entities\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Was ist BSON und wie unterscheidet es sich von JSON?\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8259 	}\expnd0\expndtw0\kerning0
BSON ist bin\'e4r und kompakt, kann gut transferiert werden, unterst\'fctzt mehr Datentypen als JSON, JSON ist textbasiert und dadurch f\'fcr Menschen einfacher zu verstehen und einfacher zu verarbeiten\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Mit welcher Fehlermeldung w\'fcrdet Ihr rechnen, wenn in der 
\f2\fs26 application.properties
\f1\fs32  keine MongoDB-URL angegeben ist? Formuliert gerne einfach auf Deutsch oder Englisch, wie ungef\'e4hr die Fehlermeldung aussehen k\'f6nnte.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8259 	}\expnd0\expndtw0\kerning0
Annahme: UnknownDatabaseURIException.  ->  Experiment: App kann nicht gebaut werden, keine richtige Fehlermeldung\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
In Spring Data-Repositories nutzen wir die Namenskonventionen um Methoden zu generieren zu lassen. Nehmen wir an, wir haben zum Beispiel eine "Car"-Entity, die ein Attribut "color" hat. Wie muss die Methodensignatur (R\'fcckgabetyp, Name, Parameter) im Repo-Interface aussehen, damit Spring Data eine Methode generiert, die alle Cars von einer bestimmten Farbe zur\'fcckgibt?\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8259 	}\expnd0\expndtw0\kerning0
List<Car> findAllBy(Color color)\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf2 \cb3 \uc0\u55357 \u56345  Projektsetup\
\pard\pardeftab720\sa320\partightenfactor0

\f1\b0\fs32 \cf0 \cb2 Erstellt gemeinsam ein neues Spring Boot Projekt f\'fcr eine "Asterix-API" in IntelliJ mit den Dependencies Spring Data Mongo und Spring Web.\
Wie lautet die URL zum Github-Repository?\
Enter answer here\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf2 \cb3 \uc0\u9000 \u65039  Wiederholung: REST-Controller "GET"\
\pard\pardeftab720\sa320\partightenfactor0

\f1\b0\fs32 \cf0 \cb2 Definiert einen Character-Record mit den Feldern id, name, age, profession.\
Baut einen AsterixController, der bei dem Endpunkt 
\f2\fs26 GET /asterix/characters
\f1\fs32  diese Liste zur\'fcckgibt:\
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf0 return List.of(\
        new Character("1", "Asterix", 35, "Krieger"),\
        new Character("2", "Obelix", 35, "Lieferant"),\
        new Character("3", "Miraculix", 60, "Druide"),\
        new Character("4", "Majestix", 60, "H\'e4uptling"),\
        new Character("5", "Troubadix", 25, "Barden"),\
        new Character("6", "Gutemine", 35, "H\'e4uptlingsfrau"),\
        new Character("7", "Idefix", 5, "Hund"),\
        new Character("8", "Geriatrix", 70, "Rentner"),\
        new Character("9", "Automatix", 35, "Schmied"),\
        new Character("10", "Grockelix", 35, "Fischer")\
);\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf0 \
\pard\pardeftab720\sa320\partightenfactor0
\cf0 Ruft den Endpunkt mit Postman auf. Ihr solltet die Liste der Charaktere sehen.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf2 \cb3 \uc0\u9000 \u65039  MongoDB\
\pard\pardeftab720\sa320\partightenfactor0

\f1\b0\fs32 \cf0 \cb2 Nun lasst den AsterixController die Charaktere aus einer MongoDB-Datenbank laden. (Achte darauf, Deine AtlasDB-URL als Environment Variable zu setzen, damit Dein Passwort nicht auf GitHub landet!)\
Schreibe die Charakter-Daten daf\'fcr davor manuell in die Datenbank (mit Compass). Tipp: Ihr k\'f6nnt ChatGPT nutzen um die Daten zu JSON umzuwandeln.\
Nutzt gerne den {\field{\*\fldinst{HYPERLINK "https://github.com/bartfastiel/spring-data"}}{\fldrslt \cf5 \ul \ulc5 Beispielcode aus dem Vortrag}} als Vorlage. Denkt an die Dinge, die Ihr braucht:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Die Maven-Dependency zu Spring Data MongoDB\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Ein Repository-Interface, dass 
\f2\fs26 MongoRepository<Charakter-Record, String>
\f1\fs32  implementiert\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
In der 
\f2\fs26 application.properties
\f1\fs32  die MongoDB-URL (aus Umgebungsvariable) und den Datenbanknamen\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Die Umgebungsvariable 
\f2\fs26 MONGODB_URI
\f1\fs32  mit der Launch-Configuration in IntelliJ\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\sa320\partightenfactor0
\cf0 Wenn Du in der AtlasDB (via Compass) eine \'c4nderung an einem Charakter vornimmst, solltet Ihr danach in Postman die ge\'e4nderten Daten empfangen k\'f6nnen.\cb1 \
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf2 \cb3 \uc0\u10024  Bonus: Anlegen, \'c4ndern und L\'f6schen\
\pard\pardeftab720\sa320\partightenfactor0

\f1\b0\fs32 \cf0 \cb2 Erweitere den AsterixController, sodass er auch POST, PUT und DELETE unterst\'fctzt.\cb1 \
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf2 \cb3 \uc0\u11088 \u65039  Bonus: Query-Parameter\
\pard\pardeftab720\sa320\partightenfactor0

\f1\b0\fs32 \cf0 \cb2 Erweitere den GET-Controller, sodass er auch Query-Parameter unterst\'fctzt um die Charaktere nach ihren Eigenschaften zu filtern.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf2 \cb3 \uc0\u11088 \u65039  Bonus: Swagger SpringDoc\
\pard\pardeftab720\sa320\partightenfactor0

\f1\b0\fs32 \cf0 \cb2 F\'fcge diese Dependency zu Deinem Projekt hinzu:\
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf0 		<dependency>\
			<groupId>org.springdoc</groupId>\
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>\
			<version>2.2.0</version>\
		</dependency>\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf0 \
\pard\pardeftab720\sa320\partightenfactor0
\cf0 Nach dem Neustart der Spring-Boot-Anwendung, navigiere zu http://localhost:8080/swagger-ui/index.html\
Du solltest nun eine Dokumentation Deiner API sehen.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf2 \cb3 \uc0\u11088 \u65039  Bonus: Custom Queries\
\pard\pardeftab720\sa320\partightenfactor0

\f1\b0\fs32 \cf0 \cb2 Erg\'e4nze einen weiteren Endpunkt, der mit einer Custom Query pro Profession das Durchschnittsalter der Charaktere dieser Profession zur\'fcckgibt.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf2 \cb3 \uc0\u55356 \u57119  Bonus: D\'f6rfer, Haustiere, Waffen\
\pard\pardeftab720\sa320\partightenfactor0

\f1\b0\fs32 \cf0 \cb2 \'dcberlegt Euch eine immer detailliertere API f\'fcr das Asterix-Universum.\
Implementiert die API mit Spring Boot und Spring Data.\
Achtet dabei auf die REST-Konventionen (RFC-Dokumentation!).\
\cb1 \
}